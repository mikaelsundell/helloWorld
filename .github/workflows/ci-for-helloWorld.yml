name: CI for helloWorld

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  # build for aswf

  aswf-build:

    name: "aswf-VFX${{matrix.vfxyear}} ${{matrix.desc}}"
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}

    strategy:
      fail-fast: false 

      matrix:
        build_type: [Release]
        include:
          - desc: gcc9 # /C++17 boost1.76 exr3.1
            nametag: linux-vfx2022
            os: ubuntu-latest
            container: aswf/ci-osl:2022-clang11
            vfxyear: 2022
            cxx_std: 17
            c_compiler: gcc
            cpp_compiler: g++

    env:
      CXX: ${{matrix.cpp_compiler}}
      CC: ${{matrix.c_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}

    steps:
      - uses: actions/checkout@v3
  
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      - name: Bootstrap
        shell: bash
        run: |
          ci/ci-printos.bash
  
      - name: Configure CMake
        run: >
           cmake -B build -S . --trace
#          cmake -B ${{ steps.strings.outputs.build-output-dir }}
#          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#          -S ${{ github.workspace }}
  
      - name: Build
        #run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
        run: sudo cmake --build build
  
      - name: Test
        #working-directory: ${{ steps.strings.outputs.build-output-dir }}
        #run: ctest --build-config ${{ matrix.build_type }}
        run: ctest --rerun-failed --output-on-failure
    

  # build for ubuntu, windows and macos

  os-build:

    name: "os-${{matrix.os}} ${{matrix.desc}}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Include macOS
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Bootstrap
      shell: bash
      run: |
        ci/ci-printos.bash

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
